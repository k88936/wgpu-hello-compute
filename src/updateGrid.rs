// File automatically generated by build.rs.
// Changes made to this file will not be saved.
pub struct OverrideConstants {
    pub fixed_point_multiplier: f32,
    pub dt: f32,
}
impl OverrideConstants {
    pub fn constants(&self) -> Vec<(&'static str, f64)> {
        let entries = vec![
            ("fixed_point_multiplier", self.fixed_point_multiplier as f64),
            ("dt", self.dt as f64),
        ];
        entries
    }
}
pub mod bind_groups {
    #[derive(Debug)]
    pub struct BindGroup0(wgpu::BindGroup);
    #[derive(Debug)]
    pub struct BindGroupLayout0<'a> {
        pub cells: wgpu::BufferBinding<'a>,
        pub real_box_size: wgpu::BufferBinding<'a>,
        pub init_box_size: wgpu::BufferBinding<'a>,
    }
    const LAYOUT_DESCRIPTOR0: wgpu::BindGroupLayoutDescriptor = wgpu::BindGroupLayoutDescriptor {
        label: Some("LayoutDescriptor0"),
        entries: &[
            wgpu::BindGroupLayoutEntry {
                binding: 0,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Storage { read_only: false },
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 1,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Uniform,
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 2,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Uniform,
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
        ],
    };
    impl BindGroup0 {
        pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
            device.create_bind_group_layout(&LAYOUT_DESCRIPTOR0)
        }
        pub fn from_bindings(device: &wgpu::Device, bindings: BindGroupLayout0) -> Self {
            let bind_group_layout = device.create_bind_group_layout(&LAYOUT_DESCRIPTOR0);
            let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
                layout: &bind_group_layout,
                entries: &[
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(bindings.cells),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(bindings.real_box_size),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(bindings.init_box_size),
                    },
                ],
                label: Some("BindGroup0"),
            });
            Self(bind_group)
        }
        pub fn set<P: SetBindGroup>(&self, pass: &mut P) {
            pass.set_bind_group(0, &self.0, &[]);
        }
    }
    #[derive(Debug, Copy, Clone)]
    pub struct BindGroups<'a> {
        pub bind_group0: &'a BindGroup0,
    }
    impl BindGroups<'_> {
        pub fn set<P: SetBindGroup>(&self, pass: &mut P) {
            self.bind_group0.set(pass);
        }
    }
    pub trait SetBindGroup {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        );
    }
    impl SetBindGroup for wgpu::ComputePass<'_> {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        ) {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
    impl SetBindGroup for wgpu::RenderPass<'_> {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        ) {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
    impl SetBindGroup for wgpu::RenderBundleEncoder<'_> {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        ) {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
}
pub fn set_bind_groups<P: bind_groups::SetBindGroup>(
    pass: &mut P,
    bind_group0: &bind_groups::BindGroup0,
) {
    bind_group0.set(pass);
}
pub mod compute {
    pub const UPDATEGRID_WORKGROUP_SIZE: [u32; 3] = [64, 1, 1];
    pub fn create_updateGrid_pipeline(device: &wgpu::Device) -> wgpu::ComputePipeline {
        let module = super::create_shader_module(device);
        let layout = super::create_pipeline_layout(device);
        device.create_compute_pipeline(&wgpu::ComputePipelineDescriptor {
            label: Some("Compute Pipeline updateGrid"),
            layout: Some(&layout),
            module: &module,
            entry_point: Some("updateGrid"),
            compilation_options: Default::default(),
            cache: Default::default(),
        })
    }
}
pub const ENTRY_UPDATEGRID: &str = "updateGrid";
pub const SOURCE : & str = "override fixed_point_multiplier: f32;\n\noverride dt: f32;\n\n@group(0) @binding(0)\nvar<storage, read_write> cells: array<package_types_Cell>;\n\n@group(0) @binding(1)\nvar<uniform> real_box_size: vec3f;\n\n@group(0) @binding(2)\nvar<uniform> init_box_size: vec3f;\n\nfn encodeFixedPoint(floating_point: f32) -> i32 {\n    return i32(floating_point * fixed_point_multiplier);\n}\n\nfn decodeFixedPoint(fixed_point: i32) -> f32 {\n    return f32(fixed_point) / fixed_point_multiplier;\n}\n\n@compute @workgroup_size(64)\nfn updateGrid(@builtin(global_invocation_id) id: vec3<u32>) {\n    if (id.x < arrayLength(&cells)) {\n        let dt = dt;\n        if (cells[id.x].mass > 0) {\n            var float_v: vec3f = vec3f(decodeFixedPoint(cells[id.x].vx), decodeFixedPoint(cells[id.x].vy), decodeFixedPoint(cells[id.x].vz));\n            float_v /= decodeFixedPoint(cells[id.x].mass);\n            cells[id.x].vx = encodeFixedPoint(float_v.x);\n            cells[id.x].vy = encodeFixedPoint(float_v.y);\n            cells[id.x].vz = encodeFixedPoint(float_v.z);\n            var x: i32 = i32(id.x) / i32(init_box_size.z) / i32(init_box_size.y);\n            var y: i32 = (i32(id.x) / i32(init_box_size.z)) % i32(init_box_size.y);\n            var z: i32 = i32(id.x) % i32(init_box_size.z);\n            if (x < 2 || x > i32(ceil(real_box_size.x) - 3)) {\n                cells[id.x].vx = 0;\n            }\n            if (y < 2 || y > i32(ceil(real_box_size.y) - 3)) {\n                cells[id.x].vy = 0;\n            }\n            if (z < 2 || z > i32(ceil(real_box_size.z) - 3)) {\n                cells[id.x].vz = 0;\n            }\n        }\n    }\n}\n\nstruct package_types_Cell {\n    vx: i32,\n    vy: i32,\n    vz: i32,\n    mass: i32\n}\n" ;
pub fn create_shader_module(device: &wgpu::Device) -> wgpu::ShaderModule {
    let source = std::borrow::Cow::Borrowed(SOURCE);
    device.create_shader_module(wgpu::ShaderModuleDescriptor {
        label: None,
        source: wgpu::ShaderSource::Wgsl(source),
    })
}
pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
    device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
        label: None,
        bind_group_layouts: &[&bind_groups::BindGroup0::get_bind_group_layout(device)],
        push_constant_ranges: &[],
    })
}
pub mod types {
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq, encase :: ShaderType)]
    pub struct Cell {
        pub vx: i32,
        pub vy: i32,
        pub vz: i32,
        pub mass: i32,
    }
}

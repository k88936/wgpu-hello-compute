// File automatically generated by build.rs.
// Changes made to this file will not be saved.
pub struct OverrideConstants {
    pub restDensity: f32,
    pub densitySizeScale: f32,
}
impl OverrideConstants {
    pub fn constants(&self) -> Vec<(&'static str, f64)> {
        let entries = vec![
            ("restDensity", self.restDensity as f64),
            ("densitySizeScale", self.densitySizeScale as f64),
        ];
        entries
    }
}
pub mod bind_groups {
    #[derive(Debug)]
    pub struct BindGroup0(wgpu::BindGroup);
    #[derive(Debug)]
    pub struct BindGroupLayout0<'a> {
        pub particles: wgpu::BufferBinding<'a>,
        pub uniforms: wgpu::BufferBinding<'a>,
        pub stretchStrength: wgpu::BufferBinding<'a>,
    }
    const LAYOUT_DESCRIPTOR0: wgpu::BindGroupLayoutDescriptor = wgpu::BindGroupLayoutDescriptor {
        label: Some("LayoutDescriptor0"),
        entries: &[
            wgpu::BindGroupLayoutEntry {
                binding: 0,
                visibility: wgpu::ShaderStages::VERTEX,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Storage { read_only: true },
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 1,
                visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Uniform,
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 2,
                visibility: wgpu::ShaderStages::VERTEX,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Uniform,
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
        ],
    };
    impl BindGroup0 {
        pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
            device.create_bind_group_layout(&LAYOUT_DESCRIPTOR0)
        }
        pub fn from_bindings(device: &wgpu::Device, bindings: BindGroupLayout0) -> Self {
            let bind_group_layout = device.create_bind_group_layout(&LAYOUT_DESCRIPTOR0);
            let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
                layout: &bind_group_layout,
                entries: &[
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(bindings.particles),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(bindings.uniforms),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(bindings.stretchStrength),
                    },
                ],
                label: Some("BindGroup0"),
            });
            Self(bind_group)
        }
        pub fn set<P: SetBindGroup>(&self, pass: &mut P) {
            pass.set_bind_group(0, &self.0, &[]);
        }
    }
    #[derive(Debug, Copy, Clone)]
    pub struct BindGroups<'a> {
        pub bind_group0: &'a BindGroup0,
    }
    impl BindGroups<'_> {
        pub fn set<P: SetBindGroup>(&self, pass: &mut P) {
            self.bind_group0.set(pass);
        }
    }
    pub trait SetBindGroup {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        );
    }
    impl SetBindGroup for wgpu::ComputePass<'_> {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        ) {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
    impl SetBindGroup for wgpu::RenderPass<'_> {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        ) {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
    impl SetBindGroup for wgpu::RenderBundleEncoder<'_> {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        ) {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
}
pub fn set_bind_groups<P: bind_groups::SetBindGroup>(
    pass: &mut P,
    bind_group0: &bind_groups::BindGroup0,
) {
    bind_group0.set(pass);
}
pub const ENTRY_VS: &str = "vs";
pub const ENTRY_FS: &str = "fs";
#[derive(Debug)]
pub struct VertexEntry<const N: usize> {
    pub entry_point: &'static str,
    pub buffers: [wgpu::VertexBufferLayout<'static>; N],
    pub constants: Vec<(&'static str, f64)>,
}
pub fn vertex_state<'a, const N: usize>(
    module: &'a wgpu::ShaderModule,
    entry: &'a VertexEntry<N>,
) -> wgpu::VertexState<'a> {
    wgpu::VertexState {
        module,
        entry_point: Some(entry.entry_point),
        buffers: &entry.buffers,
        compilation_options: wgpu::PipelineCompilationOptions {
            constants: &entry.constants,
            ..Default::default()
        },
    }
}
pub fn vs_entry(overrides: &OverrideConstants) -> VertexEntry<0> {
    VertexEntry {
        entry_point: ENTRY_VS,
        buffers: [],
        constants: overrides.constants(),
    }
}
#[derive(Debug)]
pub struct FragmentEntry<const N: usize> {
    pub entry_point: &'static str,
    pub targets: [Option<wgpu::ColorTargetState>; N],
    pub constants: Vec<(&'static str, f64)>,
}
pub fn fragment_state<'a, const N: usize>(
    module: &'a wgpu::ShaderModule,
    entry: &'a FragmentEntry<N>,
) -> wgpu::FragmentState<'a> {
    wgpu::FragmentState {
        module,
        entry_point: Some(entry.entry_point),
        targets: &entry.targets,
        compilation_options: wgpu::PipelineCompilationOptions {
            constants: &entry.constants,
            ..Default::default()
        },
    }
}
pub fn fs_entry(
    targets: [Option<wgpu::ColorTargetState>; 2],
    overrides: &OverrideConstants,
) -> FragmentEntry<2> {
    FragmentEntry {
        entry_point: ENTRY_FS,
        targets,
        constants: overrides.constants(),
    }
}
pub const SOURCE : & str = "struct VertexOutput {\n    @builtin(position)\n    position: vec4f,\n    @location(0)\n    uv: vec2f,\n    @location(1)\n    view_position: vec3f,\n    @location(2)\n    speed: f32\n}\n\nstruct FragmentInput {\n    @location(0)\n    uv: vec2f,\n    @location(1)\n    view_position: vec3f,\n    @location(2)\n    speed: f32\n}\n\nstruct FragmentOutput {\n    @location(0)\n    color: vec4f,\n    @location(1)\n    depth: vec4f,\n    @builtin(frag_depth)\n    frag_depth: f32\n}\n\nstruct RenderUniforms {\n    inv_projection_matrix: mat4x4f,\n    projection_matrix: mat4x4f,\n    view_matrix: mat4x4f,\n    inv_view_matrix: mat4x4f,\n    texel_size: vec2f,\n    sphere_size: f32\n}\n\n@group(0) @binding(0)\nvar<storage> particles: array<package_types_PosVel>;\n\n@group(0) @binding(1)\nvar<uniform> uniforms: RenderUniforms;\n\n@group(0) @binding(2)\nvar<uniform> stretchStrength: f32;\n\noverride restDensity: f32;\n\noverride densitySizeScale: f32;\n\nfn computeStretchedVertex(position: vec2f, velocity_dir: vec2f, strength: f32) -> vec2f {\n    let stretch_offset: vec2f = dot(velocity_dir, position) * velocity_dir;\n    return position + stretch_offset * strength;\n}\n\nfn area(v1: vec2f, v2: vec2f, v3: vec2f, v4: vec2f) -> f32 {\n    let ab = v2 - v1;\n    let ad = v4 - v1;\n    let s = abs(ab.x * ad.y - ab.y * ad.x);\n    return s;\n}\n\nfn scaleQuad(vel: vec2f, r: f32, strength: f32) -> f32 {\n    let s1: f32 = r * r;\n    let v1 = computeStretchedVertex(vec2f(0.5 * r, 0.5 * r), vel, strength);\n    let v2 = computeStretchedVertex(vec2f(-0.5 * r, 0.5 * r), vel, strength);\n    let v3 = computeStretchedVertex(vec2f(-0.5 * r, -0.5 * r), vel, strength);\n    let v4 = computeStretchedVertex(vec2f(0.5 * r, -0.5 * r), vel, strength);\n    let s2: f32 = area(v1, v2, v3, v4);\n    return sqrt(s1 / s2);\n}\n\n@vertex\nfn vs(@builtin(vertex_index) vertex_index: u32, @builtin(instance_index) instance_index: u32) -> VertexOutput {\n    var corner_positions = array(vec2(0.5, 0.5), vec2(0.5, -0.5), vec2(-0.5, -0.5), vec2(0.5, 0.5), vec2(-0.5, -0.5), vec2(-0.5, 0.5));\n    let size = uniforms.sphere_size * clamp(particles[instance_index].density / restDensity * densitySizeScale, 0.0, 1.0);\n    let projected_velocity = (uniforms.view_matrix * vec4f(particles[instance_index].v, 0.0)).xy;\n    let stretched_position = computeStretchedVertex(corner_positions[vertex_index] * size, projected_velocity, stretchStrength);\n    let corner = vec3(stretched_position, 0.0) * scaleQuad(projected_velocity, size, stretchStrength);\n    let speed = sqrt(dot(particles[instance_index].v, particles[instance_index].v));\n    let uv = corner_positions[vertex_index] + 0.5;\n    let real_position = particles[instance_index].position;\n    let view_position = (uniforms.view_matrix * vec4f(real_position, 1.0)).xyz;\n    let out_position = uniforms.projection_matrix * vec4f(view_position + corner, 1.0);\n    return VertexOutput(out_position, uv, view_position, speed);\n}\n\nfn value_to_color(value: f32) -> vec3<f32> {\n    let col0 = vec3f(0, 0.4, 0.8);\n    let col1 = vec3f(35, 161, 165) / 256;\n    let col2 = vec3f(95, 254, 150) / 256;\n    let col3 = vec3f(243, 250, 49) / 256;\n    let col4 = vec3f(255, 165, 0) / 256;\n    if (0 <= value && value < 0.25) {\n        let t = value / 0.25;\n        return mix(col0, col1, t);\n    }\n    else if (0.25 <= value && value < 0.5) {\n        let t = (value - 0.25) / 0.25;\n        return mix(col1, col2, t);\n    }\n    else if (0.5 <= value && value < 0.75) {\n        let t = (value - 0.5) / 0.25;\n        return mix(col2, col3, t);\n    }\n    else {\n        let t = (value - 0.75) / 0.25;\n        return mix(col3, col4, t);\n    }\n}\n\n@fragment\nfn fs(input: FragmentInput) -> FragmentOutput {\n    var out: FragmentOutput;\n    var normalxy: vec2f = input.uv * 2.0 - 1.0;\n    var r2: f32 = dot(normalxy, normalxy);\n    if (r2 > 1.0) {\n        discard;\n    }\n    var normalz = sqrt(1.0 - r2);\n    var normal = vec3(normalxy, normalz);\n    var radius = uniforms.sphere_size / 2;\n    var real_view_pos: vec4f = vec4f(input.view_position + normal * radius, 1.0);\n    var clip_space_pos: vec4f = uniforms.projection_matrix * real_view_pos;\n    out.frag_depth = clip_space_pos.z / clip_space_pos.w;\n    var diffuse: f32 = max(0.0, dot(normal, normalize(vec3(1.0, 1.0, 1.0))));\n    var color: vec3f = value_to_color(input.speed / 2);\n    out.color = vec4(diffuse * color, 1.0);\n    out.depth = vec4(real_view_pos.z, 0.0, 0.0, 1.0);\n    return out;\n}\n\nstruct package_types_PosVel {\n    position: vec3f,\n    density: f32,\n    v: vec3f\n}\n" ;
pub fn create_shader_module(device: &wgpu::Device) -> wgpu::ShaderModule {
    let source = std::borrow::Cow::Borrowed(SOURCE);
    device.create_shader_module(wgpu::ShaderModuleDescriptor {
        label: None,
        source: wgpu::ShaderSource::Wgsl(source),
    })
}
pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
    device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
        label: None,
        bind_group_layouts: &[&bind_groups::BindGroup0::get_bind_group_layout(device)],
        push_constant_ranges: &[],
    })
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct FragmentInput {
    pub uv: glam::Vec2,
    pub view_position: glam::Vec3,
    pub speed: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, encase :: ShaderType)]
pub struct RenderUniforms {
    pub inv_projection_matrix: glam::Mat4,
    pub projection_matrix: glam::Mat4,
    pub view_matrix: glam::Mat4,
    pub inv_view_matrix: glam::Mat4,
    pub texel_size: glam::Vec2,
    pub sphere_size: f32,
}
pub mod types {
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq, encase :: ShaderType)]
    pub struct PosVel {
        pub position: glam::Vec3,
        pub density: f32,
        pub v: glam::Vec3,
    }
}

// File automatically generated by build.rs.
// Changes made to this file will not be saved.
pub mod bind_groups {
    #[derive(Debug)]
    pub struct BindGroup0(wgpu::BindGroup);
    #[derive(Debug)]
    pub struct BindGroupLayout0<'a> {
        pub particles: wgpu::BufferBinding<'a>,
        pub cells: wgpu::BufferBinding<'a>,
        pub init_box_size: wgpu::BufferBinding<'a>,
        pub numParticles: wgpu::BufferBinding<'a>,
        pub densities: wgpu::BufferBinding<'a>,
    }
    const LAYOUT_DESCRIPTOR0: wgpu::BindGroupLayoutDescriptor = wgpu::BindGroupLayoutDescriptor {
        label: Some("LayoutDescriptor0"),
        entries: &[
            wgpu::BindGroupLayoutEntry {
                binding: 0,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Storage { read_only: true },
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 1,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Storage { read_only: false },
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 2,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Uniform,
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 3,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Uniform,
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 4,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Storage { read_only: false },
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
        ],
    };
    impl BindGroup0 {
        pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
            device.create_bind_group_layout(&LAYOUT_DESCRIPTOR0)
        }
        pub fn from_bindings(device: &wgpu::Device, bindings: BindGroupLayout0) -> Self {
            let bind_group_layout = device.create_bind_group_layout(&LAYOUT_DESCRIPTOR0);
            let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
                layout: &bind_group_layout,
                entries: &[
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(bindings.particles),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(bindings.cells),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(bindings.init_box_size),
                    },
                    wgpu::BindGroupEntry {
                        binding: 3,
                        resource: wgpu::BindingResource::Buffer(bindings.numParticles),
                    },
                    wgpu::BindGroupEntry {
                        binding: 4,
                        resource: wgpu::BindingResource::Buffer(bindings.densities),
                    },
                ],
                label: Some("BindGroup0"),
            });
            Self(bind_group)
        }
        pub fn set<P: SetBindGroup>(&self, pass: &mut P) {
            pass.set_bind_group(0, &self.0, &[]);
        }
    }
    #[derive(Debug, Copy, Clone)]
    pub struct BindGroups<'a> {
        pub bind_group0: &'a BindGroup0,
    }
    impl BindGroups<'_> {
        pub fn set<P: SetBindGroup>(&self, pass: &mut P) {
            self.bind_group0.set(pass);
        }
    }
    pub trait SetBindGroup {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        );
    }
    impl SetBindGroup for wgpu::ComputePass<'_> {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        ) {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
    impl SetBindGroup for wgpu::RenderPass<'_> {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        ) {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
    impl SetBindGroup for wgpu::RenderBundleEncoder<'_> {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        ) {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
}
pub fn set_bind_groups<P: bind_groups::SetBindGroup>(
    pass: &mut P,
    bind_group0: &bind_groups::BindGroup0,
) {
    bind_group0.set(pass);
}
pub mod compute {
    pub const P2G_2_WORKGROUP_SIZE: [u32; 3] = [64, 1, 1];
    pub fn create_p2g_2_pipeline(device: &wgpu::Device) -> wgpu::ComputePipeline {
        let module = super::create_shader_module(device);
        let layout = super::create_pipeline_layout(device);
        device.create_compute_pipeline(&wgpu::ComputePipelineDescriptor {
            label: Some("Compute Pipeline p2g_2"),
            layout: Some(&layout),
            module: &module,
            entry_point: Some("p2g_2"),
            compilation_options: Default::default(),
            cache: Default::default(),
        })
    }
}
pub const ENTRY_P2G_2: &str = "p2g_2";
pub const SOURCE : & str = "const fixed_point_multiplier: f32 = 10000000.0;\n\nconst stiffness: f32 = 3.0;\n\nconst rest_density: f32 = 4.0;\n\nconst dynamic_viscosity: f32 = 0.1;\n\nconst dt: f32 = 0.2;\n\nfn encodeFixedPoint(floating_point: f32) -> i32 {\n    return i32(floating_point * fixed_point_multiplier);\n}\n\nfn decodeFixedPoint(fixed_point: i32) -> f32 {\n    return f32(fixed_point) / fixed_point_multiplier;\n}\n\n@group(0) @binding(0)\nvar<storage, read> particles: array<package_types_Particle>;\n\n@group(0) @binding(1)\nvar<storage, read_write> cells: array<package_types_AtomCell>;\n\n@group(0) @binding(2)\nvar<uniform> init_box_size: vec3f;\n\n@group(0) @binding(3)\nvar<uniform> numParticles: u32;\n\n@group(0) @binding(4)\nvar<storage, read_write> densities: array<f32>;\n\n@compute @workgroup_size(64)\nfn p2g_2(@builtin(global_invocation_id) id: vec3<u32>) {\n    if (id.x < numParticles) {\n        var weights: array<vec3f, 3>;\n        let particle = particles[id.x];\n        let cell_idx: vec3f = floor(particle.position);\n        let cell_diff: vec3f = particle.position - (cell_idx + 0.5f);\n        weights[0] = 0.5f * (0.5f - cell_diff) * (0.5f - cell_diff);\n        weights[1] = 0.75f - cell_diff * cell_diff;\n        weights[2] = 0.5f * (0.5f + cell_diff) * (0.5f + cell_diff);\n        var density: f32 = 0.0;\n        for (var gx = 0; gx < 3; gx++) {\n            for (var gy = 0; gy < 3; gy++) {\n                for (var gz = 0; gz < 3; gz++) {\n                    let weight: f32 = weights[gx].x * weights[gy].y * weights[gz].z;\n                    let cell_x: vec3f = vec3f(cell_idx.x + f32(gx) - 1.0, cell_idx.y + f32(gy) - 1.0, cell_idx.z + f32(gz) - 1.0);\n                    let cell_index: i32 = i32(cell_x.x) * i32(init_box_size.y) * i32(init_box_size.z) + i32(cell_x.y) * i32(init_box_size.z) + i32(cell_x.z);\n                    density += decodeFixedPoint(cells[cell_index].mass) * weight;\n                }\n            }\n        }\n        let volume: f32 = 1.0 / density;\n        densities[id.x] = density;\n        let pressure: f32 = max(-0.0, stiffness * (pow(density / rest_density, 5.0) - 1));\n        var stress: mat3x3f = mat3x3f(-pressure, 0, 0, 0, -pressure, 0, 0, 0, -pressure);\n        let dudv: mat3x3f = particle.C;\n        let strain: mat3x3f = dudv + transpose(dudv);\n        stress += dynamic_viscosity * strain;\n        let eq_16_term0 = -volume * 4 * stress * dt;\n        for (var gx = 0; gx < 3; gx++) {\n            for (var gy = 0; gy < 3; gy++) {\n                for (var gz = 0; gz < 3; gz++) {\n                    let weight: f32 = weights[gx].x * weights[gy].y * weights[gz].z;\n                    let cell_x: vec3f = vec3f(cell_idx.x + f32(gx) - 1.0, cell_idx.y + f32(gy) - 1.0, cell_idx.z + f32(gz) - 1.0);\n                    let cell_dist = (cell_x + 0.5f) - particle.position;\n                    let cell_index: i32 = i32(cell_x.x) * i32(init_box_size.y) * i32(init_box_size.z) + i32(cell_x.y) * i32(init_box_size.z) + i32(cell_x.z);\n                    let momentum: vec3f = eq_16_term0 * weight * cell_dist;\n                    atomicAdd(&cells[cell_index].vx, encodeFixedPoint(momentum.x));\n                    atomicAdd(&cells[cell_index].vy, encodeFixedPoint(momentum.y));\n                    atomicAdd(&cells[cell_index].vz, encodeFixedPoint(momentum.z));\n                }\n            }\n        }\n    }\n}\n\nstruct package_types_Particle {\n    position: vec3f,\n    v: vec3f,\n    C: mat3x3f\n}\n\nstruct package_types_AtomCell {\n    vx: atomic<i32>,\n    vy: atomic<i32>,\n    vz: atomic<i32>,\n    mass: atomic<i32>\n}\n" ;
pub fn create_shader_module(device: &wgpu::Device) -> wgpu::ShaderModule {
    let source = std::borrow::Cow::Borrowed(SOURCE);
    device.create_shader_module(wgpu::ShaderModuleDescriptor {
        label: None,
        source: wgpu::ShaderSource::Wgsl(source),
    })
}
pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
    device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
        label: None,
        bind_group_layouts: &[&bind_groups::BindGroup0::get_bind_group_layout(device)],
        push_constant_ranges: &[],
    })
}
pub const dt: f32 = 0.2f32;
pub const dynamic_viscosity: f32 = 0.1f32;
pub const fixed_point_multiplier: f32 = 10000000f32;
pub const rest_density: f32 = 4f32;
pub const stiffness: f32 = 3f32;
pub mod types {
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq, encase :: ShaderType)]
    pub struct AtomCell {
        pub vx: i32,
        pub vy: i32,
        pub vz: i32,
        pub mass: i32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq, encase :: ShaderType)]
    pub struct Particle {
        pub position: glam::Vec3,
        pub v: glam::Vec3,
        pub C: glam::Mat3,
    }
}

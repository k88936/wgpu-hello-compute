// File automatically generated by build.rs.
// Changes made to this file will not be saved.
pub struct OverrideConstants {
    pub fixed_point_multiplier: f32,
    pub dt: f32,
}
impl OverrideConstants {
    pub fn constants(&self) -> Vec<(&'static str, f64)> {
        let entries = vec![
            ("fixed_point_multiplier", self.fixed_point_multiplier as f64),
            ("dt", self.dt as f64),
        ];
        entries
    }
}
pub mod bind_groups {
    #[derive(Debug)]
    pub struct BindGroup0(wgpu::BindGroup);
    #[derive(Debug)]
    pub struct BindGroupLayout0<'a> {
        pub particles: wgpu::BufferBinding<'a>,
        pub cells: wgpu::BufferBinding<'a>,
        pub real_box_size: wgpu::BufferBinding<'a>,
        pub init_box_size: wgpu::BufferBinding<'a>,
        pub numParticles: wgpu::BufferBinding<'a>,
        pub sphereRadius: wgpu::BufferBinding<'a>,
    }
    const LAYOUT_DESCRIPTOR0: wgpu::BindGroupLayoutDescriptor = wgpu::BindGroupLayoutDescriptor {
        label: Some("LayoutDescriptor0"),
        entries: &[
            wgpu::BindGroupLayoutEntry {
                binding: 0,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Storage { read_only: false },
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 1,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Storage { read_only: true },
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 2,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Uniform,
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 3,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Uniform,
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 4,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Uniform,
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
            wgpu::BindGroupLayoutEntry {
                binding: 5,
                visibility: wgpu::ShaderStages::COMPUTE,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Uniform,
                    has_dynamic_offset: false,
                    min_binding_size: None,
                },
                count: None,
            },
        ],
    };
    impl BindGroup0 {
        pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
            device.create_bind_group_layout(&LAYOUT_DESCRIPTOR0)
        }
        pub fn from_bindings(device: &wgpu::Device, bindings: BindGroupLayout0) -> Self {
            let bind_group_layout = device.create_bind_group_layout(&LAYOUT_DESCRIPTOR0);
            let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
                layout: &bind_group_layout,
                entries: &[
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::Buffer(bindings.particles),
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Buffer(bindings.cells),
                    },
                    wgpu::BindGroupEntry {
                        binding: 2,
                        resource: wgpu::BindingResource::Buffer(bindings.real_box_size),
                    },
                    wgpu::BindGroupEntry {
                        binding: 3,
                        resource: wgpu::BindingResource::Buffer(bindings.init_box_size),
                    },
                    wgpu::BindGroupEntry {
                        binding: 4,
                        resource: wgpu::BindingResource::Buffer(bindings.numParticles),
                    },
                    wgpu::BindGroupEntry {
                        binding: 5,
                        resource: wgpu::BindingResource::Buffer(bindings.sphereRadius),
                    },
                ],
                label: Some("BindGroup0"),
            });
            Self(bind_group)
        }
        pub fn set<P: SetBindGroup>(&self, pass: &mut P) {
            pass.set_bind_group(0, &self.0, &[]);
        }
    }
    #[derive(Debug, Copy, Clone)]
    pub struct BindGroups<'a> {
        pub bind_group0: &'a BindGroup0,
    }
    impl BindGroups<'_> {
        pub fn set<P: SetBindGroup>(&self, pass: &mut P) {
            self.bind_group0.set(pass);
        }
    }
    pub trait SetBindGroup {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        );
    }
    impl SetBindGroup for wgpu::ComputePass<'_> {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        ) {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
    impl SetBindGroup for wgpu::RenderPass<'_> {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        ) {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
    impl SetBindGroup for wgpu::RenderBundleEncoder<'_> {
        fn set_bind_group(
            &mut self,
            index: u32,
            bind_group: &wgpu::BindGroup,
            offsets: &[wgpu::DynamicOffset],
        ) {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
}
pub fn set_bind_groups<P: bind_groups::SetBindGroup>(
    pass: &mut P,
    bind_group0: &bind_groups::BindGroup0,
) {
    bind_group0.set(pass);
}
pub mod compute {
    pub const G2P_WORKGROUP_SIZE: [u32; 3] = [64, 1, 1];
    pub fn create_g2p_pipeline(device: &wgpu::Device) -> wgpu::ComputePipeline {
        let module = super::create_shader_module(device);
        let layout = super::create_pipeline_layout(device);
        device.create_compute_pipeline(&wgpu::ComputePipelineDescriptor {
            label: Some("Compute Pipeline g2p"),
            layout: Some(&layout),
            module: &module,
            entry_point: Some("g2p"),
            compilation_options: Default::default(),
            cache: Default::default(),
        })
    }
}
pub const ENTRY_G2P: &str = "g2p";
pub const SOURCE : & str = "override fixed_point_multiplier: f32;\n\noverride dt: f32;\n\n@group(0) @binding(0)\nvar<storage, read_write> particles: array<package_types_Particle>;\n\n@group(0) @binding(1)\nvar<storage, read> cells: array<package_types_Cell>;\n\n@group(0) @binding(2)\nvar<uniform> real_box_size: vec3f;\n\n@group(0) @binding(3)\nvar<uniform> init_box_size: vec3f;\n\n@group(0) @binding(4)\nvar<uniform> numParticles: u32;\n\n@group(0) @binding(5)\nvar<uniform> sphereRadius: f32;\n\nfn decodeFixedPoint(fixed_point: i32) -> f32 {\n    return f32(fixed_point) / fixed_point_multiplier;\n}\n\n@compute @workgroup_size(64)\nfn g2p(@builtin(global_invocation_id) id: vec3<u32>) {\n    if (id.x < numParticles) {\n        particles[id.x].v = vec3f(0.0);\n        var weights: array<vec3f, 3>;\n        let particle = particles[id.x];\n        let cell_idx: vec3f = floor(particle.position);\n        let cell_diff: vec3f = particle.position - (cell_idx + 0.5f);\n        weights[0] = 0.5f * (0.5f - cell_diff) * (0.5f - cell_diff);\n        weights[1] = 0.75f - cell_diff * cell_diff;\n        weights[2] = 0.5f * (0.5f + cell_diff) * (0.5f + cell_diff);\n        var B: mat3x3f = mat3x3f(vec3f(0.0), vec3f(0.0), vec3f(0.0));\n        for (var gx = 0; gx < 3; gx++) {\n            for (var gy = 0; gy < 3; gy++) {\n                for (var gz = 0; gz < 3; gz++) {\n                    let weight: f32 = weights[gx].x * weights[gy].y * weights[gz].z;\n                    let cell_x: vec3f = vec3f(cell_idx.x + f32(gx) - 1.0, cell_idx.y + f32(gy) - 1.0, cell_idx.z + f32(gz) - 1.0);\n                    let cell_dist: vec3f = (cell_x + 0.5f) - particle.position;\n                    let cell_index: i32 = i32(cell_x.x) * i32(init_box_size.y) * i32(init_box_size.z) + i32(cell_x.y) * i32(init_box_size.z) + i32(cell_x.z);\n                    let weighted_velocity: vec3f = vec3f(decodeFixedPoint(cells[cell_index].vx), decodeFixedPoint(cells[cell_index].vy), decodeFixedPoint(cells[cell_index].vz)) * weight;\n                    let term: mat3x3f = mat3x3f(weighted_velocity * cell_dist.x, weighted_velocity * cell_dist.y, weighted_velocity * cell_dist.z);\n                    B += term;\n                    particles[id.x].v += weighted_velocity;\n                }\n            }\n        }\n        particles[id.x].C = B * 4f;\n        particles[id.x].position += particles[id.x].v * dt;\n        particles[id.x].position = vec3f(clamp(particles[id.x].position.x, 1.0, real_box_size.x - 2.0), clamp(particles[id.x].position.y, 1.0, real_box_size.y - 2.0), clamp(particles[id.x].position.z, 1.0, real_box_size.z - 2.0));\n        let center = vec3f(real_box_size.x / 2, real_box_size.y / 2, real_box_size.z / 2);\n        let dist = center - particles[id.x].position;\n        let dirToOrigin = normalize(dist);\n        var rForce = vec3f(0);\n        let r: f32 = sphereRadius;\n        if (dot(dist, dist) < r * r) {\n            particles[id.x].v += -(r - sqrt(dot(dist, dist))) * dirToOrigin * 3.0;\n        }\n        particles[id.x].v += dirToOrigin * 0.1;\n        let k = 3.0;\n        let wall_stiffness = 1.0;\n        let x_n: vec3f = particles[id.x].position + particles[id.x].v * dt * k;\n        let wall_min: vec3f = vec3f(3.0);\n        let wall_max: vec3f = real_box_size - 4.0;\n        if (x_n.x < wall_min.x) {\n            particles[id.x].v.x += wall_stiffness * (wall_min.x - x_n.x);\n        }\n        if (x_n.x > wall_max.x) {\n            particles[id.x].v.x += wall_stiffness * (wall_max.x - x_n.x);\n        }\n        if (x_n.y < wall_min.y) {\n            particles[id.x].v.y += wall_stiffness * (wall_min.y - x_n.y);\n        }\n        if (x_n.y > wall_max.y) {\n            particles[id.x].v.y += wall_stiffness * (wall_max.y - x_n.y);\n        }\n        if (x_n.z < wall_min.z) {\n            particles[id.x].v.z += wall_stiffness * (wall_min.z - x_n.z);\n        }\n        if (x_n.z > wall_max.z) {\n            particles[id.x].v.z += wall_stiffness * (wall_max.z - x_n.z);\n        }\n    }\n}\n\nstruct package_types_Particle {\n    position: vec3f,\n    v: vec3f,\n    C: mat3x3f\n}\n\nstruct package_types_Cell {\n    vx: i32,\n    vy: i32,\n    vz: i32,\n    mass: i32\n}\n" ;
pub fn create_shader_module(device: &wgpu::Device) -> wgpu::ShaderModule {
    let source = std::borrow::Cow::Borrowed(SOURCE);
    device.create_shader_module(wgpu::ShaderModuleDescriptor {
        label: None,
        source: wgpu::ShaderSource::Wgsl(source),
    })
}
pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
    device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
        label: None,
        bind_group_layouts: &[&bind_groups::BindGroup0::get_bind_group_layout(device)],
        push_constant_ranges: &[],
    })
}
pub mod types {
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq, encase :: ShaderType)]
    pub struct Cell {
        pub vx: i32,
        pub vy: i32,
        pub vz: i32,
        pub mass: i32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq, encase :: ShaderType)]
    pub struct Particle {
        pub position: glam::Vec3,
        pub v: glam::Vec3,
        pub C: glam::Mat3,
    }
}
